"""
Module for dealing with the command line arguments.
"""
import argparse
from itertools import chain

from rivt import __description__, __version__
from rivt.data import Axis


__all__ = ['parse_argv']


def parse_argv(argv):
    """Parse command line arguments.

    :param argv: List of command line argument strings,
                 *including* the program name in argv[0]

    :return: Parse result from :func:`argparse.ArgumentParser.parse_args`
    """
    parser = argparse.ArgumentParser(
        description=__description__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        add_help=False)

    # TODO(xion): support URLs as IMAGE arguments
    input_group = parser.add_argument_group("Input", "Source images to merge")
    input_group.set_defaults(axis=Axis.HORIZONTAL)
    input_group.add_argument('images', type=str, nargs='+',
                             help="image files to sew together",
                             metavar="IMAGE")
    axis_group = input_group.add_mutually_exclusive_group()
    axis_group.add_argument('--horz', '--horizontal', dest='axis',
                            action='store_const', const=Axis.HORIZONTAL,
                            help="arrange the images horizontally")
    axis_group.add_argument('--vertical', dest='axis',
                            action='store_const', const=Axis.VERTICAL,
                            help="arrange the images vertically")

    result_group = parser.add_argument_group(
        "Result", "What to do with resulting image") \
        .add_mutually_exclusive_group()
    result_group.add_argument('-o', '--output',
                              type=argparse.FileType('wb', 0), default='-',
                              help="output the image to file with given name",
                              metavar="OUTPUT")
    result_group.add_argument('-s', '--show',
                              action='store_true', default=False,
                              help="show the resulting image "
                                   "(in a system-specific way)")

    misc_group = parser.add_argument_group("Miscellaneous", "Other options")
    misc_group.add_argument('--version', action='version', version=__version__)
    misc_group.add_argument('-h', '--help', action='help',
                             help="show this help message and exit")

    # get the autogenerated usage string and tweak it a little
    # to exclude the miscellaneous flags which aren't part of a normal usage
    usage = parser.format_usage()
    usage = usage[usage.find(parser.prog):].rstrip("\n")  # remove cruft
    for misc_flag in chain.from_iterable(a.option_strings
                                         for a in misc_group._group_actions):
        usage = usage.replace(" [%s]" % misc_flag, "")
    parser.usage = usage

    return parser.parse_args(argv[1:])
